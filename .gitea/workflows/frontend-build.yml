# .gitea/workflows/frontend-ci-cd.yml

name: 前端构建与发布

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container: docker.xuanyuan.me/node:18

    steps:
      - name: 1. 手动检出代码
        env:
          # GITEA_TOKEN 是由 Gitea 自动注入的临时令牌，用于认证
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          echo "================================================="
          echo " STEP 1: MANUALLY CHECKING OUT SOURCE CODE"
          echo "================================================="
          
          # 确保 git 可用
          if ! command -v git &> /dev/null
          then
              echo "::error::git command not found. Please ensure git is installed in the container."
              apt update && apt install -y git
          fi
          
          # 配置 git 安全目录，避免 'dubious ownership' 错误
          # GITEA_WORKSPACE 是 Gitea Runner 注入的当前工作区路径
          git config --global --add safe.directory "${GITEA_WORKSPACE}"

          # 定义仓库信息（需要根据你的实际情况修改）
          GITEA_SERVER_URL="https://git.handywote.top"
          GITEA_REPOSITORY="Handy_Wote/MyWebsite"
          
          # 拼接带认证信息的仓库 URL
          REPO_URL="${GITEA_SERVER_URL}/${GITEA_REPOSITORY}.git"
          
          # 使用 'gitea-actions' 作为特殊用户名和 GITEA_TOKEN 作为密码进行认证
          AUTH_REPO_URL=$(echo "$REPO_URL" | sed "s|://|://gitea-actions:${GITEA_TOKEN}@|")
          
          echo "Cloning repository from ${REPO_URL}..."
          
          # 先初始化一个空的 git 仓库
          git init
          
          # 添加远程仓库
          git remote add origin "${AUTH_REPO_URL}"
          
          # 获取所有远程引用
          git fetch origin
          
          # 检出指定的分支或标签
          if [ -n "$GITEA_REF_NAME" ]; then
            echo "Checking out branch/tag: ${GITEA_REF_NAME}"
            git checkout "${GITEA_REF_NAME}"
          elif [ -n "$GITEA_SHA" ]; then
            echo "Checking out specific commit: ${GITEA_SHA}"
            git checkout "${GITEA_SHA}"
          else
            # 默认检出 main 分支
            echo "Checking out main branch (default)"
            git checkout main || git checkout master
          fi
          
          echo "Source code checked out successfully."
          echo "-------------------------------------------------"

      - name: 调试：检查项目根目录文件结构
        run: |
          echo "Current working directory (pwd):"
          pwd
          echo "---"
          echo "Listing all files and directories (ls -laR):"
          ls -laR
          echo "---"

      - name: 2. 安装依赖
        run: |
          echo "Entering 'frontend' directory..."
          cd frontend
          
          echo "Current directory (pwd):"
          pwd
          echo "---"
          
          echo "Listing files in 'frontend' (ls -la):"
          ls -la
          echo "---"
          
          echo "Starting 'npm ci' to install dependencies..."
          npm ci

      - name: 3. 运行 Lint 和测试
        working-directory: ./frontend # 使用 working-directory 简化 cd 操作
        run: |
          if npm run --silent lint; then
            echo "Lint check passed."
          else
            echo "::error::Lint check failed!"
            exit 1
          fi
          
          if npm run --silent test; then
            echo "Unit tests passed."
          else
            echo "::error::Unit tests failed!"
            exit 1
          fi

      - name: 4. 构建前端项目
        working-directory: ./frontend
        run: |
          npm run build
          echo "Build complete. Checking 'dist' directory:"
          ls -la dist/
      
      - name: 5. 打包并发布到 Gitea Release (仅在推送 Tag 时执行)
        if: startsWith(gitea.ref, 'refs/tags/v')
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          echo "Tag push detected, creating Gitea Release..."
          
          RELEASE_TAG="${GITEA_REF_NAME}"
          ARCHIVE_NAME="frontend-dist-${RELEASE_TAG}.tar.gz"
          RELEASE_API_URL="${GITEA_API_URL}/repos/${GITEA_REPOSITORY}/releases"

          echo "Archiving build artifacts..."
          # -C frontend/ dist/ 表示切换到 frontend 目录，然后打包其下的 dist 目录
          tar -czf "${ARCHIVE_NAME}" -C frontend/ dist/
          echo "Archive created: ${ARCHIVE_NAME}"
          
          # 使用 Heredoc 语法创建多行字符串
          RELEASE_BODY=$(cat <<EOF
          ## 🚀 Release ${RELEASE_TAG}
          This is an automated release for the frontend project.
          EOF
          )

          echo "Creating release for tag ${RELEASE_TAG}..."
          RESPONSE=$(curl --silent --show-error -X POST "${RELEASE_API_URL}" \
            -H "Authorization: token ${GITEA_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"${RELEASE_TAG}\", \"name\": \"Release ${RELEASE_TAG}\", \"body\": \"${RELEASE_BODY}\"}"
          )
          
          # 使用 jq (如果可用) 或 grep/sed 解析 JSON
          UPLOAD_URL=$(echo "${RESPONSE}" | grep -o '"upload_url":"[^"]*' | sed 's/"upload_url":"//')

          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" == "null" ]; then
            echo "::error::Failed to create release or get upload URL."
            echo "API Response: ${RESPONSE}"
            exit 1
          fi

          echo "Uploading attachment to ${UPLOAD_URL}..."
          curl --silent --show-error -X POST "${UPLOAD_URL}?name=${ARCHIVE_NAME}" \
            -H "Authorization: token ${GITEA_TOKEN}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@${ARCHIVE_NAME}"

          echo "Process completed successfully."