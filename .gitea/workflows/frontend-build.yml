# .gitea/workflows/frontend-ci-cd.yml

name: 前端构建与发布 (内网调试版)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container: docker.xuanyuan.me/node:18

    steps:
      - name: 1. 检出代码
        # 修正：使用标准的 actions/checkout 来真正地拉取代码
        uses: actions/checkout@v3

      - name: 调试：检查项目根目录文件结构
        run: |
          echo "当前工作目录 (pwd):"
          pwd
          echo "---"
          echo "列出所有文件和目录 (ls -laR):"
          ls -laR
          echo "---"

      - name: 2. 安装依赖
        run: |
          echo "准备进入 frontend 目录..."
          cd frontend
          
          echo "已进入目录，当前工作目录 (pwd):"
          pwd
          echo "---"
          
          echo "列出 frontend 目录下的文件 (ls -la):"
          ls -la
          echo "---"
          
          echo "现在，开始执行 npm ci..."
          npm ci

      - name: 3. 运行 Lint 和测试
        run: |
          cd frontend
          # 确保 package.json 中有 lint 和 test 脚本
          if npm run --silent lint; then
            echo "代码风格检查通过。"
          else
            echo "::error::代码风格检查失败！"
            exit 1
          fi
          
          if npm run --silent test; then
            echo "单元测试通过。"
          else
            echo "::error::单元测试失败！"
            exit 1
          fi

      - name: 4. 构建前端项目
        run: |
          cd frontend
          npm run build
          echo "构建完成，检查 dist 目录:"
          # 注意：这里需要检查 frontend/dist，但因为你已经 cd frontend 了，所以路径是 dist/
          ls -la dist/
      
      - name: 5. 打包并发布到 Gitea Release (仅在推送 Tag 时执行)
        if: startsWith(gitea.ref, 'refs/tags/v')
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          echo "检测到 Tag 推送，开始创建 Release..."
          
          RELEASE_TAG="${GITEA_REF_NAME}"
          # 修正打包路径，打包文件将创建在工作区根目录
          ARCHIVE_NAME="frontend-dist-${RELEASE_TAG}.tar.gz"
          RELEASE_API_URL="${GITEA_API_URL}/repos/${GITEA_REPOSITORY}/releases"

          echo "正在打包构建产物..."
          tar -czf "${ARCHIVE_NAME}" -C frontend/ dist/
          echo "打包完成: ${ARCHIVE_NAME}"
          
          RELEASE_BODY=$(cat <<EOF
          ## 🚀 Release ${RELEASE_TAG}
          这是前端项目的自动化发布版本。
          EOF
          )

          RESPONSE=$(curl --silent -X POST "${RELEASE_API_URL}" \
            -H "Authorization: token ${GITEA_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"${RELEASE_TAG}\", \"name\": \"Release ${RELEASE_TAG}\", \"body\": \"${RELEASE_BODY}\"}"
          )
          
          UPLOAD_URL=$(echo "${RESPONSE}" | grep -o '"upload_url":"[^"]*' | sed 's/"upload_url":"//')

          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" == "null" ]; then
            echo "::error::创建 Release 失败或未能获取到上传 URL。"
            echo "API 响应: ${RESPONSE}"
            exit 1
          fi

          echo "正在上传附件..."
          curl --silent -X POST "${UPLOAD_URL}?name=${ARCHIVE_NAME}" \
            -H "Authorization: token ${GITEA_TOKEN}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@${ARCHIVE_NAME}"

          echo "流程完成。"